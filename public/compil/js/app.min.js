(function() {
  'use strict';

  var globals = typeof global === 'undefined' ? self : global;
  if (typeof globals.require === 'function') return;

  var modules = {};
  var cache = {};
  var aliases = {};
  var has = {}.hasOwnProperty;

  var expRe = /^\.\.?(\/|$)/;
  var expand = function(root, name) {
    var results = [], part;
    var parts = (expRe.test(name) ? root + '/' + name : name).split('/');
    for (var i = 0, length = parts.length; i < length; i++) {
      part = parts[i];
      if (part === '..') {
        results.pop();
      } else if (part !== '.' && part !== '') {
        results.push(part);
      }
    }
    return results.join('/');
  };

  var dirname = function(path) {
    return path.split('/').slice(0, -1).join('/');
  };

  var localRequire = function(path) {
    return function expanded(name) {
      var absolute = expand(dirname(path), name);
      return globals.require(absolute, path);
    };
  };

  var initModule = function(name, definition) {
    var hot = hmr && hmr.createHot(name);
    var module = {id: name, exports: {}, hot: hot};
    cache[name] = module;
    definition(module.exports, localRequire(name), module);
    return module.exports;
  };

  var expandAlias = function(name) {
    return aliases[name] ? expandAlias(aliases[name]) : name;
  };

  var _resolve = function(name, dep) {
    return expandAlias(expand(dirname(name), dep));
  };

  var require = function(name, loaderPath) {
    if (loaderPath == null) loaderPath = '/';
    var path = expandAlias(name);

    if (has.call(cache, path)) return cache[path].exports;
    if (has.call(modules, path)) return initModule(path, modules[path]);

    throw new Error("Cannot find module '" + name + "' from '" + loaderPath + "'");
  };

  require.alias = function(from, to) {
    aliases[to] = from;
  };

  var extRe = /\.[^.\/]+$/;
  var indexRe = /\/index(\.[^\/]+)?$/;
  var addExtensions = function(bundle) {
    if (extRe.test(bundle)) {
      var alias = bundle.replace(extRe, '');
      if (!has.call(aliases, alias) || aliases[alias].replace(extRe, '') === alias + '/index') {
        aliases[alias] = bundle;
      }
    }

    if (indexRe.test(bundle)) {
      var iAlias = bundle.replace(indexRe, '');
      if (!has.call(aliases, iAlias)) {
        aliases[iAlias] = bundle;
      }
    }
  };

  require.register = require.define = function(bundle, fn) {
    if (bundle && typeof bundle === 'object') {
      for (var key in bundle) {
        if (has.call(bundle, key)) {
          require.register(key, bundle[key]);
        }
      }
    } else {
      modules[bundle] = fn;
      delete cache[bundle];
      addExtensions(bundle);
    }
  };

  require.list = function() {
    var list = [];
    for (var item in modules) {
      if (has.call(modules, item)) {
        list.push(item);
      }
    }
    return list;
  };

  var hmr = globals._hmr && new globals._hmr(_resolve, require, modules, cache);
  require._cache = cache;
  require.hmr = hmr && hmr.wrap;
  require.brunch = true;
  globals.require = require;
})();

(function() {
var global = typeof window === 'undefined' ? this : window;
var process;
var __makeRelativeRequire = function(require, mappings, pref) {
  var none = {};
  var tryReq = function(name, pref) {
    var val;
    try {
      val = require(pref + '/node_modules/' + name);
      return val;
    } catch (e) {
      if (e.toString().indexOf('Cannot find module') === -1) {
        throw e;
      }

      if (pref.indexOf('node_modules') !== -1) {
        var s = pref.split('/');
        var i = s.lastIndexOf('node_modules');
        var newPref = s.slice(0, i).join('/');
        return tryReq(name, newPref);
      }
    }
    return none;
  };
  return function(name) {
    if (name in mappings) name = mappings[name];
    if (!name) return;
    if (name[0] !== '.' && pref) {
      var val = tryReq(name, pref);
      if (val !== none) return val;
    }
    return require(name);
  }
};
'use strict';

(function (app) {
  'use strict';
})(require('angular').module('app', [require('angular-ui-router'), require('angular-cookies'), require('angular-messages'), require('angular-materialize'), 'app.home', 'app.common', 'app.portefolio', 'app.login', 'app.services', 'app.config']));

'use strict';

(function (app) {})(require('angular').module('app.common', []));

'use strict';

(function (app) {
    'use strict';

    app.config(['$stateProvider', function ($stateProvider) {
        $stateProvider.state('app.home', {
            url: '/',
            template: '<home></home>'
        });
    }]);
})(require('angular').module('app.home', []));

'use strict';

(function (app) {
    'use strict';

    app.config(['$stateProvider', function ($stateProvider) {
        $stateProvider.state('app.login', {
            url: '/login',
            template: '<login></login>'
        });
    }]);
})(require('angular').module('app.login', []));

'use strict';

(function (app) {
    'use strict';

    app.config(['$stateProvider', function ($stateProvider) {
        $stateProvider.state('app.portefolioList', {
            url: '/portefolio',
            template: '<portefolio-list></portefolio-list>'
        }).state('app.portefolioAdd', {
            url: '/portefolio/new',
            template: '<portefolio-add></portefolio-add>'
        }).state('app.portefolioArticle', {
            url: '/portefolio/:id',
            template: '<portefolio-article></portefolio-article>'
        });
    }]);
})(require('angular').module('app.portefolio', []));

'use strict';

(function (app) {})(require('angular').module('app.config', []));

'use strict';

(function (app) {})(require('angular').module('app.services', ['ngCookies']));

'use strict';

(function (app) {
    'use strict';

    app.component('navBar', {
        templateUrl: 'js/components/common/navBar.html',
        controller: ['$state', 'usersService', function ($state, usersService) {

            angular.extend(this, {
                $onInit: function $onInit() {
                    this.getUser();
                },
                getUser: function getUser() {
                    var _this = this;

                    usersService.getCurrent().then(function (user) {
                        _this.user = user;
                    });
                },
                disconnect: function disconnect() {
                    var _this2 = this;

                    usersService.disconnect().then(function (user) {
                        _this2.user = null;
                        $state.reload();
                    });
                }
            });
        }]
    });
})(require('angular').module('app.common'));

'use strict';

(function (app) {
    'use strict';

    app.component('home', {
        templateUrl: 'js/components/home/home.html'
    });
})(require('angular').module('app.home'));

'use strict';

(function (app) {
    'use strict';

    app.component("login", {
        templateUrl: 'js/components/login/login.html',
        controller: ['usersService', '$state', function (usersService, $state) {
            angular.extend(this, {
                connect: function connect(user) {
                    usersService.connect(user).then(function (user) {
                        $state.go('app.home');
                    });
                }
            });
        }]
    });
})(require('angular').module('app.login'));

'use strict';

(function (app) {
    'use strict';

    app.component("portefolioAdd", {
        templateUrl: 'js/components/portefolio/portefolioAdd.html',
        controller: ['portefoliosService', '$state', 'usersService', function (portefoliosService, $state, usersService) {
            angular.extend(this, {
                $onInit: function $onInit() {
                    this.getUser();
                },
                getUser: function getUser() {
                    var _this = this;

                    usersService.getCurrent().then(function (user) {
                        _this.user = user;
                    });
                },
                add: function add(website) {
                    var _this2 = this;

                    portefoliosService.add(website).then(function (res) {
                        _this2.website = {};
                        $state.go('app.portefolioList');
                    });
                },
                cancel: function cancel() {
                    $state.go('app.portefolioList');
                },
                submitForm: function submitForm(form, website) {
                    if (form.$valid) {
                        this.add(website);
                    }
                }
            });
        }]
    });
})(require('angular').module('app.portefolio'));

'use strict';

(function (app) {
    'use strict';

    app.component("portefolioArticle", {
        templateUrl: 'js/components/portefolio/portefolioArticle.html',
        controller: ['portefoliosService', '$state', 'usersService', function (portefoliosService, $state, usersService) {
            angular.extend(this, {
                $onInit: function $onInit() {
                    this.getUser();
                    this.get($state.params.id);
                    this.modeEdit = false;
                },
                getUser: function getUser() {
                    var _this = this;

                    usersService.getCurrent().then(function (user) {
                        _this.user = user;
                    });
                },
                get: function get(selectedWebsiteId) {
                    var _this2 = this;

                    portefoliosService.getById(selectedWebsiteId).then(function (res) {
                        _this2.website = res.data;
                    });
                },
                close: function close() {
                    $state.go('app.portefolioList');
                },
                editWebsite: function editWebsite() {
                    this.modeEdit = true;
                },
                cancel: function cancel() {
                    this.modeEdit = false;
                },
                update: function update(website) {
                    var _this3 = this;

                    portefoliosService.update(website).then(function (res) {
                        _this3.cancel();
                    });
                },
                delete: function _delete(website) {
                    var _this4 = this;

                    portefoliosService.delete(website).then(function (res) {
                        _this4.close();
                    });
                },
                submitForm: function submitForm(form, website) {
                    if (form.$valid) {
                        this.update(website);
                    }
                }
            });
        }]
    });
})(require('angular').module('app.portefolio'));

"use strict";

(function (app) {
    'use strict';

    app.component("portefolioList", {
        bindings: {
            limit: "="
        },
        templateUrl: 'js/components/portefolio/portefolioList.html',
        controller: ['portefoliosService', '$state', 'usersService', function (portefoliosService, $state, usersService) {
            angular.extend(this, {
                $onInit: function $onInit() {
                    this.getUser();
                    this.getAll();
                },
                getUser: function getUser() {
                    var _this = this;

                    usersService.getCurrent().then(function (user) {
                        _this.user = user;
                    });
                },
                getAll: function getAll() {
                    var _this2 = this;

                    portefoliosService.get().then(function (res) {
                        _this2.portefolios = res.data;
                    });
                },
                goCreateWebsite: function goCreateWebsite() {
                    $state.go('app.portefolioAdd');
                }
            });
        }]
    });
})(require('angular').module('app.portefolio'));

'use strict';

(function (app) {
    'use strict';

    app.config(['$httpProvider', function ($httpProvider) {
        $httpProvider.interceptors.push(['$q', '$injector', '$cookies', function ($q, $injector, $cookies) {
            return {
                request: function request(config) {
                    config.headers = config.headers || {};
                    if ($cookies.get('token')) config.headers.authorization = $cookies.get('token');
                    return config;
                },
                responseError: function responseError(response) {
                    var state = $injector.get('$state');
                    if (response.status === 401 || response.status === 403) state.go('app.home');
                    return $q.reject(response);
                }
            };
        }]);
    }]);
})(require('angular').module('app.config'));

'use strict';

(function (app) {
    'use strict';

    app.config(['$stateProvider', '$urlRouterProvider', '$locationProvider', function ($stateProvider, $urlRouterProvider, $locationProvider) {
        $locationProvider.hashPrefix('!');
        $urlRouterProvider.otherwise('/');
        $stateProvider.state('app', {
            url: '',
            abstract: true,
            template: '<ui-view></ui-view>'
        });
    }]);
})(require('angular').module('app.config'));

'use strict';

(function (app) {

    'use strict';

    app.service('portefoliosService', function ($http) {
        return {
            get: function get() {
                return $http.get('/api/websites');
            },
            getById: function getById(websiteId) {
                return $http.get('/api/websites/' + websiteId);
            },
            add: function add(website) {
                return $http.post('/api/websites', website);
            },
            update: function update(website) {
                return $http.put('/api/websites/' + website._id, website);
            },
            delete: function _delete(website) {
                return $http.delete('/api/websites/' + website._id);
            }
        };
    });
})(require('angular').module('app.services'));

'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

(function (app) {
    'use strict';

    app.service('usersService', ['$http', '$cookies', '$window', '$q', function () {
        function UsersService($http, $cookies, $window, $q) {
            _classCallCheck(this, UsersService);

            this.$http = $http;
            this.$cookies = $cookies;
            this.$window = $window;
            this.$q = $q;
            this.currentUser = null;
        }

        _createClass(UsersService, [{
            key: 'get',
            value: function get() {
                return this.$http.get('/api/users');
            }
        }, {
            key: 'connect',
            value: function connect(data) {
                var _this = this;

                return new Promise(function (resolve, reject) {
                    _this.$http.post('/api/auth', data).then(function (res) {
                        _this.currentUser = res.data.user;
                        _this.$cookies.put('token', res.data.token);
                        resolve(res.data.user);
                    }).catch(function () {
                        reject();
                    });
                });
            }
        }, {
            key: 'disconnect',
            value: function disconnect() {
                var _this2 = this;

                return new Promise(function (resolve, reject) {
                    _this2.$cookies.remove("token");
                    _this2.currentUser = null;
                    resolve();
                });
            }
        }, {
            key: 'getCurrent',
            value: function getCurrent() {
                var deferred = this.$q.defer();
                if (!this.$cookies.get('token')) {
                    deferred.reject();
                } else {
                    if (!this.currentUser) {
                        var payload = this.$cookies.get('token').split('.')[1];
                        payload = this.$window.atob(payload);
                        payload = JSON.parse(payload);
                        this.currentUser = payload._doc;
                        if (Math.round(new Date().getTime() / 1000) > payload.exp) return this.disconnect();
                    }
                    deferred.resolve(this.currentUser);
                }
                return deferred.promise;
            }
        }]);

        return UsersService;
    }()]);
})(angular.module('app.services'));

require.alias("process/browser.js", "process");process = require('process');require.register("___globals___", function(exports, require, module) {
  
});})();require('___globals___');


//# sourceMappingURL=app.min.js.map